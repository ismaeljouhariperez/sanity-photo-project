---
description: 
globs: 
alwaysApply: true
---
---
description: Guidelines for Next.js Frontend Development
globs: ["**/*.tsx", "**/*.ts"]
---

# Technologies Utilized

- **Frontend Framework:** Utilize Next.js with React and TypeScript for building server-side rendered applications.

# Coding Standards

- **Naming Conventions:** Follow camelCase for variables and functions, PascalCase for React components, and UPPER_SNAKE_CASE for constants.
- **Code Style:** Adhere to ESLint and Prettier configurations to maintain consistent code formatting.
- **Type Safety:** Ensure strict typing by enabling TypeScript's `strict` mode.

# Project Architecture

- **Directory Structure:** Organize components, pages, and styles in a modular fashion to promote reusability and maintainability.
- **State Management:** Use React's Context API or Zustand for state management as needed.

# Dependencies and Libraries

- **Animations:** Implement animations using Framer Motion for intuitive and responsive UI interactions.
- **Styling:** Apply Tailwind CSS for utility-first styling, ensuring a responsive and consistent design system.

# Development Practices

- **Testing:** Write unit tests using Jest and React Testing Library to ensure component reliability.
- **Design Patterns:** Implement design patterns such as Container-Presenter and Compound Components to enhance code scalability and readability.

# Documentation

- **Project Documentation:** Maintain comprehensive documentation using Markdown files to describe components, pages, and utilities.
- **Code Comments:** Write clear and concise comments for complex logic to aid understanding.

# Error Handling and Security

- **Error Boundaries:** Utilize React Error Boundaries to gracefully handle UI errors.
- **Input Validation:** Perform client-side validation for all user inputs to prevent erroneous data submission.

# Performance Optimization

- **Code Splitting:** Leverage Next.js's dynamic imports to split code and improve load times.
- **Image Optimization:** Use Next.js Image component for optimized image rendering.

# Continuous Integration and Deployment

- **CI/CD Pipeline:** Set up GitHub Actions for automated testing and deployment processes.
- **Hosting:** Deploy the application on Vercel for seamless integration with Next.js.

# Additional Guidelines

- **Accessibility:** Ensure all components meet WCAG accessibility standards.
- **SEO:** Implement SEO best practices using Next.js's Head component for meta tags and descriptions.